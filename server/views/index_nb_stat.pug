doctype html
html(lang="en")
  head
    title NKN Agent - Node List
    script(src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js")
    // choose a theme file
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/css/theme.default.min.css')
    // load jQuery and tablesorter scripts
    script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js')
  body
    div
      table#Network(style='width:50%; border-spacing: 0px;', border='1', align='center')
        thead
          tr
            th Network Nodes
            th Network Status
            th Network Version
            th Network Total Block
            th Network Latest Block Created
        tbody
            tr(align='center')
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'
              td='N/A'
      //br
      //div(style='width:100%', align='center')
        //a  . 
        //a#btnAuthKey(class="button", style='disabled; background-color: #a0a9bc; cursor: pointer') Client AuthKey
        //a  . 
      br
      div(style='width:100%', align='center')
        a  . 
        a(href="/server/add", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Add Server
        a  . 
        //a(disabled="disabled", href="/server/remove", style='color: #000000; background-color: #a0a9bc; text-decoration: none') Remove Server
        //a  . 
      br

      table#MyNode(style='width:50%; border-spacing: 0px;', border='1', align='center')
        thead
          tr
            th ALL
            th PERSIST_FINISHED
            th WAIT_FOR_SYNCING
            th SYNC_FINISHED
            th SYNC_STARTED
            th NO_ID
            th INTERNAL_ERROR
            th ERROR / OFFLINE
            th PROPOSAL_SUBMITTED
            
        tbody
            tr(align='center')
              td=servers.length
              td=0
              td=0
              td=0
              td=0
              td=0
              td=0
              td=0
              td=0
      br
      div(style='width:100%', align='center')
        a Auto F5: OFF
        a  . 
        a(href="/", style='color: #000000; background-color: #a0a9bc; text-decoration: none') HOME
        a  . 
      br
      table#MyNodeList(style='width:90% !important; margin: auto !important; text-align: center; border-spacing: 0px !important;', border='1', align='center')
        thead
          tr
            th ID
            th IP
            th Status
            th Height
            th Relayed Message
            th Relayed r/h
            th Version
            th Uptime
            //- th Last Online
            th Mined
            th Ally
            th Avg.
            th Min.
            th Max
            th <100ms
            th 100-1000ms
            th >1000ms

        tbody
          each server, index in servers
            tr(align='center')
              td=index+1
              td=server
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''
              td=''

      //- Network Info
      script.
        $(document).ready(() => {
            $.ajax({
                url: 'https://api.nknx.org/network/stats',
                type: 'GET',
                dataType: 'json',
                success(networkStatistics) {
                    try {
                      document.getElementById('Network').rows[1].cells[0].innerText = networkStatistics.totalNodes;
                    } catch {}
                },
            });

            $.ajax({
                url: 'https://openapi.nkn.org/api/v1/blocks?per_page=1&page=1',
                type: 'GET',
                dataType: 'json',
                success(networkStatistics) {
                    try {
                      document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.blocks.data[0].id;
                      document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.blocks.data[0].header.height;
                    } catch {}
                },
            });

            //- $.ajax({
            //-     url: 'https://openapi.nkn.org/api/v1/statistics/counts',
            //-     type: 'GET',
            //-     dataType: 'json',
            //-     success(networkStatistics) {
            //-         try {
            //-           document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.blockCount;
            //-         } catch {}
            //-     },
            //- });
            
            //- $.ajax({
            //-     url: 'https://api2.nknx.org/statistics/network',
            //-     type: 'GET',
            //-     dataType: 'json',
            //-     success(networkStatistics) {
            //-         try {
            //-             document.getElementById('Network').rows[1].cells[1].innerHTML = networkStatistics.status
            //-             document.getElementById('Network').rows[1].cells[2].innerHTML = networkStatistics.version
            //-             document.getElementById('Network').rows[1].cells[3].innerHTML = networkStatistics.current_height
            //-             document.getElementById('Network').rows[1].cells[4].innerHTML = networkStatistics.latest_block
            //-         } catch {}
            //-     },
            //- });
        });

      script.
        $(document).ready(() => {
          
        });

      //- Node Checking
      script.
        /* eslint-disable  */
        $(document).ready(() => {
            var proposalSubmitted = 0;
            const myNodeTable = document.getElementById('MyNode');

            function statistics() {
                const status = [];

                const td = [...document.querySelectorAll('#MyNodeList > tbody > tr > td')].length;
                const tr = [...document.querySelectorAll('#MyNodeList > tbody > tr')].length;
                const step = td/tr;

                console.log(step);
                
                //- for (let x = 0, n = [...document.querySelectorAll('#MyNodeList > tbody > tr > td')]; x < n.length; x += 9) {
                for (let x = 0, n = [...document.querySelectorAll('#MyNodeList > tbody > tr > td')]; x < n.length; x += step) {
                    status.push(n[x + 2].innerText);
                }

                //- console.log(status);

                const STATUS_CONST = ['Checking..','PERSIST_FINISHED', 'WAIT_FOR_SYNCING', 'SYNC_FINISHED', 'SYNC_STARTED', 'OFFLINE', 'ERROR', 'INTERNAL_ERROR']

                const MyNode = {};
                for (let i = 0; i < status.length; i++) {
                  if (STATUS_CONST.includes(status[i])) {
                    MyNode[status[i]] = 1 + (MyNode[status[i]] || 0);
                  } else {
                    MyNode['NO_ID'] = 1 + (MyNode['NO_ID'] || 0);
                  }
                }

                myNodeTable.rows[1].cells[1].innerHTML = MyNode.PERSIST_FINISHED || 0;
                myNodeTable.rows[1].cells[2].innerHTML = MyNode.WAIT_FOR_SYNCING || 0;
                myNodeTable.rows[1].cells[3].innerHTML = MyNode.SYNC_FINISHED || 0;
                myNodeTable.rows[1].cells[4].innerHTML = MyNode.SYNC_STARTED || 0;
                myNodeTable.rows[1].cells[5].innerHTML = MyNode.NO_ID || 0;
                myNodeTable.rows[1].cells[6].innerHTML = MyNode.INTERNAL_ERROR || 0;
                myNodeTable.rows[1].cells[7].innerHTML = MyNode.OFFLINE || 0;
                myNodeTable.rows[1].cells[8].innerHTML = proposalSubmitted;

                //- console.log(MyNode);
            }

            function secondsToHms(d) {
                d = Number(d);
                var dd = Math.floor(d / 86400);
                var h = Math.floor(d % 86400 / 3600);
                var m = Math.floor(d % 3600 / 60);
                var s = Math.floor(d % 3600 % 60);

                var ddDisplay = dd > 0 ? dd.toString().padStart(2, '0') + "d, " : "00d, ";
                var hDisplay = h > 0 ? h.toString().padStart(2, '0') + "h, " : "00h, ";
                var mDisplay = m > 0 ? m.toString().padStart(2, '0') + "m, " : "00m, ";
                var sDisplay = s > 0 ? s.toString().padStart(2, '0') + "s" : "00s";
                return ddDisplay + hDisplay + mDisplay + sDisplay; 
            }

            function getNeighbours() {
                for (let r = 1, n = myNodeListTable.rows.length; r < n; r += 1) {
                  const ip = myNodeListTable.rows[r].cells[1].innerHTML;
                  const stt = ['Checking..', 'OFFLINE', 'INTERNAL_ERROR'];
                  if (stt.includes(myNodeListTable.rows[r].cells[2].innerHTML)) {}
                  else {
                    myNodeListTable.rows[r].cells[9].innerHTML = "calc..";
                    $.ajax({
                        url: `http://${ip}:30003`,
                        data: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'getneighbor',
                            params: {},
                            id: 'nkn-agent', // id is needed !!
                        }),
                        //- async: true,
                        type: 'POST',
                        dataType: 'json',
                        success(data) {
                            if (data.result !== undefined && data.result.length > 0) {
                                //- console.log(`${data.result.length}`);
                                const myArray = data.result;
                                myArray.sort(function (a, b) {
                                  return a.roundTripTime - b.roundTripTime
                                });

                                var min = myArray[0].roundTripTime,
                                  max = myArray[myArray.length - 1].roundTripTime,
                                  avg = (myArray.reduce((a, b) => a + (b['roundTripTime'] || 0), 0)) / myArray.length;

                                myNodeListTable.rows[r].cells[9].innerHTML = data.result.length;
                                myNodeListTable.rows[r].cells[10].innerHTML = avg.toFixed(0);
                                myNodeListTable.rows[r].cells[11].innerHTML = min;
                                myNodeListTable.rows[r].cells[12].innerHTML = max;
                                
                                var ms100 = myArray.filter(a => a.roundTripTime < 100).length,
                                  ms1000 = myArray.filter(a => a.roundTripTime > 100 && a.roundTripTime < 1000).length,
                                  ms9999 = myArray.filter(a => a.roundTripTime > 1000).length;

                                myNodeListTable.rows[r].cells[13].innerHTML = ms100;
                                myNodeListTable.rows[r].cells[14].innerHTML = ms1000;
                                myNodeListTable.rows[r].cells[15].innerHTML = ms9999;
                            } else {
                                myNodeListTable.rows[r].cells[9].innerHTML = 'N/A';
                                console.log(`${ip} - ${data}`);
                                
                                //- reject();
                            }
                        },
                        error(err) {
                            myNodeListTable.rows[r].cells[9].innerHTML = 'N/A';
                            console.log(err);
                            
                            //- reject();
                        },
                        //- timeout: 10000,
                    });
                  }
                }
            }

            const myNodeListTable = document.getElementById('MyNodeList');
            const promises = [];

            for (let r = 1, n = myNodeListTable.rows.length; r < n; r += 1) {
                const ip = myNodeListTable.rows[r].cells[1].innerHTML;
                myNodeListTable.rows[r].cells[2].innerHTML = 'Checking..';

                let rq = new Promise((resolve, reject) => {
                    $.ajax({
                        url: `http://${ip}:30003`,
                        data: JSON.stringify({
                            jsonrpc: '2.0',
                            method: 'getnodestate',
                            params: {},
                            id: 'nkn-agent', // id is needed !!
                        }),
                        async: true,
                        type: 'POST',
                        dataType: 'json',
                        success(data) {
                            if (data.result !== undefined) {
                                myNodeListTable.rows[r].cells[2].innerHTML = data.result.syncState;
                                myNodeListTable.rows[r].cells[3].innerHTML = data.result.height;
                                myNodeListTable.rows[r].cells[4].innerHTML = data.result.relayMessageCount;
                                myNodeListTable.rows[r].cells[5].innerHTML = (data.result.relayMessageCount/(data.result.uptime/3600)).toFixed(0);
                                myNodeListTable.rows[r].cells[6].innerHTML = data.result.version;
                                myNodeListTable.rows[r].cells[7].innerHTML = secondsToHms(data.result.uptime);
                                myNodeListTable.rows[r].cells[8].innerHTML = data.result.proposalSubmitted;

                                proposalSubmitted += data.result.proposalSubmitted;
                                
                                resolve();
                            } else if (data.error.walletAddress !== undefined) {
                                myNodeListTable.rows[r].cells[2].innerHTML = data.error.walletAddress;
                                
                                resolve();
                            } else if (data.error.code === -45024) {
                                myNodeListTable.rows[r].cells[2].innerHTML = 'INTERNAL_ERROR';
                                //- console.log(`${ip} - ${data}`);
                                
                                resolve();
                            } else {
                                myNodeListTable.rows[r].cells[2].innerHTML = 'ERROR';
                                console.log(`${ip} - ${data}`);
                                
                                reject();
                            }
                        },
                        error(err) {
                            myNodeListTable.rows[r].cells[2].innerHTML = 'OFFLINE';
                            console.log(err);
                            
                            reject();
                        },
                        timeout: 10000,
                    });
                });

                promises.push(rq);
            }

            //- let xInterval;
            //- const xTimeout = setTimeout(() => {
            //-     xInterval = setInterval(statistics, 5000);
            //- }, 3000);

            Promise.all(promises.map(p => p.catch(() => undefined)))
              .then(() => {
                //- clearInterval(xInterval);
                //- setTimeout(statistics, 3000);
                console.log("Done checking");
                console.log("Automatic reload after (s): " + (60000 + 5 * myNodeListTable.rows.length * 100));
                statistics();
                getNeighbours();
                setTimeout(() => {
                  $("#MyNodeList").tablesorter();
                }, 10000);
                setTimeout(() => {
                  //- document.location.reload(true);
                }, 60000 + 5*myNodeListTable.rows.length*100);
            });
        });
        /* eslint-enable  */

      //- Show AuthKey
      script.
        $(document).ready(() => {
          $('#btnAuthKey').click(()=>{
            $.ajax({
                url: '/server/authkey',
                type: 'GET',
                success(authKey) {
                    if (authKey.length > 0) {
                        prompt("Your AuthKey for NKN-Agent Client", authKey);
                    }
                },
            });
          });
        });
      